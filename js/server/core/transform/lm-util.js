const _ = require('lodash');
const { EVENT_INTERVAL_MINUTES } = require('../../config');
const { getTimeIndex } = require('../../util/getTimeIndex');
const { DelegateEvent } = require('../types');
const moment = require('moment');
const fetch = require('cross-fetch').fetch;

const getLMTimeseriesFinalIndex = (snapshotData) => {
  // Snapshot timeseries (generated by Vanir) overshoots by 1 extra interval. Account for this.
  const finalIndex = [
    ...Object.values(snapshotData).reduce((prev, curr) => {
      Object.values(curr).forEach((val) => {
        if (!val.length) return;
        prev.add(val[val.length - 1][0]);
      });
      return prev;
    }, new Set()),
  ]
    .sort((a, b) => a - b)
    .pop();
  return finalIndex;
};

let smallestTimestampUnix = Infinity;
// Restructure snapshot address liquidity event entries into per-time interval aggregated event form
// (see global-state.md for example)
// let deltaCoeff = 0.000004;
// (async () => {
//   while (true) {
//     console.log({ deltaCoeff });
//     console.log({ deltaCoeff });
//     await new Promise((r) => setTimeout(r, 20000));
//   }
// })();
function remapLMAddresses(addresses, deltaCoeff) {
  // delete addresses['sif1zdh3jjrfp3jjs5ufccdsk0uml22dgl7gghu98g'];
  const mapped = _.map(addresses, (tokens, address) => {
    const addressTokenEvents = _.map(tokens, (timeIntervals, token) => {
      return timeIntervals
        .map((interval) => {
          smallestTimestampUnix =
            smallestTimestampUnix > interval.unix_timestamp
              ? interval.unix_timestamp
              : smallestTimestampUnix;
          return DelegateEvent.fromJSON({
            timestamp:
              (getTimeIndex(interval.unix_timestamp * 1000) + 1) *
              EVENT_INTERVAL_MINUTES,
            amount: interval.delta, //* deltaCoeff,
            delegateAddress: address,
          });
        })
        .filter((e) => e.amount !== 0);
    }).filter((events) => events.length !== 0);
    return addressTokenEvents;
  });

  const rawEvents = _.flattenDeep(mapped);
  let allTimeIntervalEvents = _.groupBy(rawEvents, 'timestamp');
  allTimeIntervalEvents = _.mapValues(
    allTimeIntervalEvents,
    (timeIntervalEvents) => {
      return timeIntervalEvents.map((event) => {
        event.clearTimestamp();
        return event;
      });
    }
  );

  let allTimeIntervalAddressEvents = _.mapValues(
    allTimeIntervalEvents,
    (timeIntervalEvents) => {
      return _.groupBy(timeIntervalEvents, 'delegateAddress');
    }
  );

  allTimeIntervalAddressEvents = _.mapValues(
    allTimeIntervalAddressEvents,
    (timeIntervalAddressEvents, timeInterval) => {
      return _.mapValues(
        timeIntervalAddressEvents,
        (addressEvents, address) => {
          return [
            DelegateEvent.fromJSON({
              timestamp: parseInt(timeInterval),
              delegateAddress: address,
              amount: addressEvents.reduce((accum, addressEvent) => {
                return accum + parseFloat(addressEvent.amount);
              }, 0),
            }),
          ];
        }
      );
    }
  );

  return allTimeIntervalAddressEvents;
}

function createClaimEvents(addresses) {
  const claimEventsByUserByTimestamp = {};
  for (const addr in addresses) {
    const claimEventsTimeSeries = addresses[addr];
    for (let item of claimEventsTimeSeries) {
      const timelineIndex = getTimeIndex(item.unix * 1000);
      const didClaim = true;
      const timestamp = (1 + timelineIndex) * EVENT_INTERVAL_MINUTES;
      claimEventsByUserByTimestamp[timestamp] =
        claimEventsByUserByTimestamp[timestamp] || {};
      if (didClaim) {
        claimEventsByUserByTimestamp[timestamp][addr] = true;
      }
    }
  }
  return claimEventsByUserByTimestamp;
}

function createDispensationEvents(addresses) {
  const dispensationEventsByUserByTimestamp = {};
  for (const addr in addresses) {
    const dispensationEventsTimeSeries = addresses[addr];
    for (let i = 0; i < dispensationEventsTimeSeries.length; i++) {
      const item = dispensationEventsTimeSeries[i];
      const amountToDistribute = item.amount;
      const timelineIndex = getTimeIndex(item.timestamp);
      const timestamp = (timelineIndex + 1) * EVENT_INTERVAL_MINUTES;
      dispensationEventsByUserByTimestamp[timestamp] =
        dispensationEventsByUserByTimestamp[timestamp] || {};
      if (amountToDistribute) {
        dispensationEventsByUserByTimestamp[timestamp][addr] =
          amountToDistribute;
      }
    }
  }
  return dispensationEventsByUserByTimestamp;
}

module.exports = {
  remapLMAddresses,
  createClaimEvents,
  createDispensationEvents,
  getLMTimeseriesFinalIndex,
};
